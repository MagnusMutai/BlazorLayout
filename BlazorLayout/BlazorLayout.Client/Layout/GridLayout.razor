@inherits LayoutComponentBase

<div class="page">

    <main>
        <div class="top-row">

            <div>
                <button @onclick="ToggleNavMenu" style=" width:160px;">Toggle <br /> Menu</button>
            </div>

            <h5>Navbar content here</h5>

            <div class="dropdown" data-bs-theme="light">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButtonLight" data-bs-toggle="dropdown" aria-expanded="false">
                    Theme
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButtonLight">
                    <li><a @onclick="LightMode" class="dropdown-item" href="#">Light</a></li>
                    <li><a @onclick="DarkMode" class="dropdown-item" href="#">Dark</a></li>
                    <li><a @onclick="Auto" class="dropdown-item" href="#">Auto</a></li>
                </ul>
            </div>

            <div>
                <button @onclick="ToggleRightBar" style=" width:160px;">Toggle <br /> Menu</button>
            </div>

        </div>


        <div class="grid-container">
            <div class="sidebar @NavMenuCssClass">
                <NavMenu />
            </div>

            <article class="content px-4 w-100">
                @Body
            </article>

            <div class="toolbar @NavbarCssClass">
                <BlazorLayout.Client.Pages.Toolbar></BlazorLayout.Client.Pages.Toolbar>
            </div>
        </div>

    </main>
</div>



<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool collapseNavMenu = false;
    private bool collapseRightbar = false;

    [Inject]
    public IJSRuntime JSRuntime  { get; set; }


    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string? NavbarCssClass => collapseRightbar ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleRightBar()
    {
        collapseRightbar = !collapseRightbar;

    }

    private async void DarkMode()
    {
        await JSRuntime.InvokeVoidAsync("darkMode");
    }

    private async void LightMode()
    {
        await JSRuntime.InvokeVoidAsync("lightMode");
    }
    
    private async void Auto()
    {
        await JSRuntime.InvokeVoidAsync("auto");
    }


    }
